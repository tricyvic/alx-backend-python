pipeline {
    agent any
    
    environment {
        // Python and Django settings
        PYTHON_VERSION = '3.10'
        VIRTUAL_ENV = 'venv'
        DJANGO_SETTINGS_MODULE = 'messaging_app.settings'
        DB_HOST = 'localhost'
        DB_NAME = 'test_messaging_app_db'
        DB_USER = 'test_user'
        DB_PASSWORD = 'test_password'
        DJANGO_SECRET_KEY = 'django-insecure-test-key-for-jenkins-ci-cd-pipeline-12345'
        DEBUG = 'True'
        
        // GitHub credentials
        GITHUB_CREDENTIALS = credentials('github-credentials')
        
        // Docker settings
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        DOCKER_IMAGE_NAME = 'your-dockerhub-username/django-messaging-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        DOCKER_LATEST_TAG = 'latest'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code from GitHub...'
                git branch: 'main',
                    credentialsId: 'github-credentials',
                    url: 'https://github.com/abdessamad-haddouche/alx-backend-python.git'
                
                sh 'pwd'
                sh 'ls -la'
                sh 'ls -la messaging_app/ || echo "messaging_app directory not found"'
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                echo 'Setting up Python virtual environment...'
                
                sh '''
                    python3 --version
                    python3 -m pip3 install --user virtualenv
                    python3 -m virtualenv ${VIRTUAL_ENV}
                    
                    . ${VIRTUAL_ENV}/bin/activate
                    python --version
                    pip3 install --upgrade pip
                    
                    cd messaging_app
                    
                    if [ -f messaging_app/requirements.txt ]; then
                        echo "Installing dependencies from messaging_app/requirements.txt..."
                        pip3 install -r messaging_app/requirements.txt
                    elif [ -f requirements.txt ]; then
                        echo "Installing dependencies from requirements.txt..."
                        pip3 install -r requirements.txt
                    else
                        echo "requirements.txt not found, installing basic dependencies..."
                        pip3 install Django==5.2.1 djangorestframework==3.15.1 pytest pytest-django pytest-html
                    fi
                    
                    pip3 install pytest pytest-django pytest-html pytest-cov coverage
                '''
            }
        }
        
        stage('Database Setup') {
            steps {
                echo 'Setting up test database...'
                
                sh '''
                    . ${VIRTUAL_ENV}/bin/activate
                    cd messaging_app
                    
                    python manage.py makemigrations --settings=messaging_app.test_settings || echo "Migrations already exist"
                    python manage.py migrate --settings=messaging_app.test_settings
                '''
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'Running tests with pytest...'
                
                sh '''
                    . ${VIRTUAL_ENV}/bin/activate
                    cd messaging_app
                    
                    python -m pytest \
                        --html=test-reports/pytest-report.html \
                        --self-contained-html \
                        --cov=. \
                        --cov-report=html:test-reports/coverage \
                        --cov-report=xml:test-reports/coverage.xml \
                        --junitxml=test-reports/junit.xml \
                        -v \
                        chats/tests.py chats/test_auth.py || echo "Some tests may have failed"
                '''
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image for Django messaging app...'
                
                script {
                    // Change to messaging_app directory where Dockerfile is located
                    dir('messaging_app') {
                        // Build Docker image with build number tag
                        sh """
                            docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} .
                            docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_LATEST_TAG} .
                        """
                        
                        // List Docker images to verify build
                        sh 'docker images | grep django-messaging-app'
                    }
                }
            }
        }
        
        stage('Test Docker Image') {
            steps {
                echo 'Testing the built Docker image...'
                
                script {
                    // Test if the image runs correctly
                    sh """
                        # Test if the container starts successfully
                        docker run --name test-container -d -p 8001:8000 ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}
                        
                        # Wait a few seconds for the container to start
                        sleep 10
                        
                        # Check if container is running
                        docker ps | grep test-container
                        
                        # Clean up test container
                        docker stop test-container || true
                        docker rm test-container || true
                    """
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                echo 'Pushing Docker image to Docker Hub...'
                
                script {
                    // Login to Docker Hub using credentials
                    sh '''
                        echo "$DOCKER_HUB_CREDENTIALS_PSW" | docker login -u "$DOCKER_HUB_CREDENTIALS_USR" --password-stdin
                    '''
                    
                    // Push both tagged and latest versions
                    sh """
                        docker push ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}
                        docker push ${DOCKER_IMAGE_NAME}:${DOCKER_LATEST_TAG}
                    """
                    
                    // Logout from Docker Hub
                    sh 'docker logout'
                }
            }
        }
        
        stage('Generate Reports') {
            steps {
                echo 'Generating test reports...'
                
                sh '''
                    cd messaging_app
                    mkdir -p test-reports
                    echo "Build completed successfully at $(date)" > test-reports/build-summary.txt
                    echo "Tests executed with pytest" >> test-reports/build-summary.txt
                    echo "Docker image built: ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}" >> test-reports/build-summary.txt
                    echo "Docker image pushed to Docker Hub successfully" >> test-reports/build-summary.txt
                '''
            }
        }
        
        stage('Clean Up') {
            steps {
                echo 'Cleaning up local Docker images...'
                
                script {
                    // Clean up local images to save space (optional)
                    sh """
                        # Remove local images to save space
                        docker rmi ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} || true
                        
                        # Keep the latest tag for future use
                        # docker rmi ${DOCKER_IMAGE_NAME}:${DOCKER_LATEST_TAG} || true
                        
                        # Clean up dangling images
                        docker image prune -f || true
                    """
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed. Publishing reports...'
            
            // Archive test results and build artifacts
            archiveArtifacts artifacts: 'messaging_app/test-reports/**/*', allowEmptyArchive: true
            
            // Clean up workspace
            cleanWs()
        }
        
        success {
            echo '✅ Pipeline completed successfully!'
            echo "✅ Docker image ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} built and pushed successfully!"
        }
        
        failure {
            echo '❌ Pipeline failed!'
            
            // Clean up any running test containers
            sh '''
                docker stop test-container || true
                docker rm test-container || true
            '''
        }
        
        unstable {
            echo '⚠️ Pipeline completed with warnings!'
        }
    }
}